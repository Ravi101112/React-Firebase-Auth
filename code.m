% Theoretical ideal state value
Y_ideal = [260,269.999982000000,279.499963000002,288.515495951256,297.061706232973,305.153209686797,312.804149029318,320.028221388391,326.838700497599,333.248455825399,339.269970049428,344.915355699701,350.196371405449,355.124437930122,359.710654024991,363.965812043524,367.900413214319,371.524682454694,374.848582609280,377.881828010637,380.633897277220,383.114045284435,385.331314265059,387.294544014604,389.012381194601,390.493287741827,391.745548404290,392.777277435134,393.596424483930,394.210779731110,394.627978315888,394.855504111112,394.900692900270,394.770735012634,394.472677472314,394.013425716121,393.399744933609,392.638261080696,391.735461615922,390.697696005795,389.531176042829,388.241976016984,386.836032778127,385.319145724140,383.696976746201,381.975050159786,380.158752646975,378.253333232791,376.263903315545,374.195436768530,372.052770127857,369.840602878910,367.563497851604,365.225881732562,362.832045700398,360.386146188466,357.892205777785,355.354114221378,352.775629599840,350.160379606761,347.511862961514,344.833450945947,342.128389060679,339.399798795944,336.650679511329,333.883910418224,331.102252658356,328.308351471485,325.504738445047,322.693833838405,319.877948974202,317.059288689347,314.239953838110,311.421943839936,308.607159264663,305.797404448005,302.994390130358,300.199736112196,297.414973919596,294.641549473684,291.880825758083,289.134085478776,286.402533711065,283.687300528665,280.989443610276,278.309950819315,275.649742752803,273.009675255731,270.390541897547,267.793076407720,265.217955067622,262.665799056303,260.137176747964,257.632605959264,255.152556144806,252.697450539451,250.267668246286,247.863546269362,245.485381490478,243.133432589514,240.807921907998,238.509037255759,236.236933660701,233.991735061845,231.773535945964,229.582402928248,227.418376277525,225.281471386725,223.171680189311,221.088972522517,219.033297438313,217.004584463052,215.002744806851,213.027672523779,211.079245623976,209.157327138880,207.261766140729,205.392398717575,203.549048905029,201.731529575980,199.939643289554,198.173183100545,196.431933330592,194.715670302345,193.024163037851,191.357173922409,189.714459335100,188.095770247187,186.500852789587,184.929448790560,183.381296284762,181.856129994784,180.353681786267,178.873681097663,177.415855345680,175.979930307441,174.565630480321,173.172679420449,171.800800060785,170.449715009695,169.119146830886,167.808818305554,166.518452677574,165.247773882502,163.996506761180,162.764377258663,161.551112609186,160.356441507852,159.180094269708,158.021802976828,156.881301614026,155.758326193773,154.652614870883,153.563908047508,152.491948468952,151.436481310797,150.397254257825,149.374017575168,148.366524172142,147.374529659155,146.397792398098,145.436073546595,144.489137096464,143.556749906733,142.638681731545,141.734705243257,140.844596051027,139.968132715175,139.105096757588,138.255272668419,137.418447909319,136.594412913450,135.782961082470,134.983888780719,134.196995326800,133.422082982727,132.658956940831,131.907425308591,131.167299091534,130.438392174373,129.720521300507,129.013506050034,128.317168816386,127.631334781714,126.955831891146,126.290490825998,125.635144976062,124.989630411059,124.353785851335,123.727452637897,123.110474701865,122.502698533401,121.903973150204,121.314150065618,120.733083256430,120.160629130395,119.596646493564,119.040996517445,118.493542706056,117.954150862909,117.422689057962,116.899027594587,116.383038976576,115.874597875224,115.373581096523,114.879867548485,114.393338208633,113.913876091664,113.441366217332,112.975695578542,112.516753109704,112.064429655335,111.618617938944,111.179212532207,110.746109824444,110.319207992409,109.898406970409,109.483608420753,109.074715704544,108.671633852817,108.274269538045,107.882531045983,107.496328247903,107.115572573176,106.740176982241,106.370055939944,106.005125389249,105.645302725339,105.290506770080,104.940657746880,104.595677255916,104.255488249744,103.920015009290,103.589183120208,103.262919449623,102.941152123243,102.623810502835,102.310825164085,102.002127874806,101.697651573521,101.397330348401,101.101099416555,100.808895103685,100.520654824074,100.236317060933,99.9558213470840,99.6791082459776,99.4061193330497,99.1367971774050,98.8710853238250,98.6089282750982,98.3502714746660,98.0950612895814,97.8432449937747,97.5947707516236,97.3495876018208,97.1076454415377,96.8688950108762,96.6332878776077,96.4007764221918,96.1713138230725,95.9448540422458,95.7213518110955,95.5007626164919,95.2830426871497,95.0681489802399,94.8560391682529,94.6466716261065,94.4400054184960,94.2360002874822,94.0346166403119,93.8358155374679,93.6395586809448,93.4458084027443,93.2545276535895,93.0656799918504,92.8792295726804,92.6951411373566,92.5133800028232,92.3339120514316,92.1567037208756,91.9817219943163,91.8089343906947,91.6383089552276,91.4698142500833,91.3034193452340,91.1390938094815,90.9768077016529,90.8165315619626,90.6582364035379,90.5018937041057,90.3474753978348,90.1949538673343,90.0443019358013,89.8954928593189,89.7485003192975,89.6032984150601,89.4598616565673,89.3181649572782,89.1781836271470,89.0398933657504,88.9032702555450,88.7682907552500,88.6349316933556,88.5031702617518,88.3729840094770,88.2443508365838,88.1172489881189,87.9916570482154,87.8675539342958,87.7449188913823,87.6237314865134,87.5039716032639,87.3856194363670,87.2686554864359,87.1530605547826,87.0388157383338,86.9259024246390,86.8143022869721,86.7039972795226,86.5949696326751,86.4872018483757,86.3806766955835,86.2753772058052,86.1712866687116,86.0683886278339,85.9666668763385,85.8661054528791,85.7666886375238,85.6684009477566,85.5712271345504,85.4751521785128,85.3801612860998,85.2862398858988,85.1933736249785,85.1015483653041,85.0107501802172,84.9209653509788,84.8321803633740,84.7443819043776,84.6575568588791,84.5716923064659,84.4867755182644,84.4027939538361,84.3197352581298,84.2375872584869,84.1563379617005,84.0759755511254,83.9964883838399,83.9178649878569,83.8400940593843,83.7631644601330,83.6870652146730,83.6117855078341,83.5373146821535,83.4636422353669,83.3907578179433,83.3186512306630,83.2473124222371,83.1767314869686,83.1068986624533,83.0378043273209,82.9694389990146,82.9017933316091,82.8348581136656,82.7686242661242,82.7030828402317,82.6382250155047,82.5740420977285,82.5105255169882,82.4476668257349,82.3854576968839,82.3238899219451,82.2629554091848,82.2026461818193,82.1429543762382,82.0838722402573,82.0253921314020,81.9675065152182,81.9102079636119,81.8534891532172,81.7973428637903,81.7417619766311,81.6867394730307,81.6322684327448,81.5783420324922,81.5249535444782,81.4720963349427,81.4197638627317,81.3679496778926,81.3166474202924,81.2658508182592,81.2155536872448,81.1657499285105,81.1164335278330,81.0675985542329,81.0192391587223,80.9713495730741,80.9239241086105,80.8769571550115,80.8304431791422];

% State matrices
p1 = 0;             % 
p2 = 0.015;         % min^-1
p3 = 0.000002;      % mU/I/min^2
p4 = 0.21;          % min^-1
p5 = 0.05;          % min^-1

Gb = 80;
Ib = 7;
c = [1 0 0 0];

x1 = (260);         % Plasma glucose concerntration(mg/dl)
x2 = (0);           % Remote insulin (min^-1)
x3 = (7);           % Plasma insulin (min^-1)
x4 = (10);          % Fischer's meal disturbance (mg/dl/min)

x = [x1 x2 x3 x4]';
x_o = [Gb 0 Ib 0]';

xc = [p1*Gb -p3*Ib p4*Ib 0]'; 

x1d = (180);
x2d = (0);
x3d = (0);
x4d = (10);

xd = [x1d; x2d; x3d; x4d];

%Covariance matrix
P_est = diag([30 10^-4 5 5]);

% Noise matrices
Q = diag([1 1 1 1]);

% Variable and matrices for Cubature Kalman Filter
n = 4;           %dimension of state
m = 2*n;         %number of cubature points

X_cubature = ones(4,1);
X_pred = ones(4,1);
X_cubature_meas = ones(4,1);
Z_propagated = (1);

% Cubature points
Xi = sqrt(m/2) *[1  0  0  0 -1  0  0  0;
                 0  1  0  0  0 -1  0  0;
                 0  0  1  0  0  0 -1  0;
                 0  0  0  1  0  0  0 -1];

wt = ones(1,2*n)*(1/m);

A1=[0 0 1;
   0 0 1;
   0 0 0];
B1=[0;
   0;
   1];
Q1=[1 0 0 ;
   0  1000 0;
   0  0   1000];
R1= 10;
C1=eye(3);
D1=zeros(3,1);

[K,S,E]=lqr(A1,B1,Q1,R1);

t_final=30;
K

h=0;
h
%Preallocating matrices
X_propagated = ones(4,8);
Z_pred = ones(4,400);
rms_f = ones(100,400);
rms_o = ones(100,400);

% Simulation

u =0;
%Outer loop is for monte carlo runs for RMSE

for mc = 1:100
    y_t = Y_ideal + 50*randn(size(Y_ideal));
    y = y_t - 80;
    
    R = (150*rand);
    
    for t=1:400

        %State function
        f = [-p1-xd(2,t)  -Gb   0   1;
                0         -p2  +p3  0;
                0          0   -p4  0;
                0          0    0  -p5 ];

    % Cubature Kalman Filter Algorithm :-
    %-----------------------------TimeUpdate----------------------------------   

        S = chol(P_est,'lower');

        %Input matrix
        g = [0 0 u(t) 0]';

        for k = 1:m
          % Calculation of the cubature points
          X_cubature(:,k) = S*Xi(:,k) + xd(:,t);

          % Calculation of the propagation points
          X_propagated(:,k) = f*X_cubature(:,k) + g;
        end

        % estimation of predicted state
        X_pred(:,t+1) = sum(X_propagated,2)*wt(:,k);

        % estimation of predicted error covariance
        P_pred = (1/m)*(X_propagated*X_propagated')-(X_pred(:,t+1)*X_pred(:,t+1)')+Q;  


     %---------------------------MeasurementUpdate-----------------------------

        S_pred = chol(P_pred,'lower');

        for k=1:m

            % Cubature point for measurement update
            X_cubature_meas(:,k) = S_pred*Xi(:,k) + X_pred(:,t+1);                    

            % Propagated cubature points for measurement
            Z_propagated(:,k) = c*X_cubature_meas(:,k);

        end

        % estimation of predicted measurement
        Z_pred(t+1) = (sum(Z_propagated,2)*(1/m));   

        % Innovation covariance matrix
        P_innovation = (1/m)*(Z_propagated*Z_propagated')-(Z_pred(t+1)*Z_pred(t+1)')+R;   

        % Cross covariance
        P_crosscov = (1/m)*(X_cubature_meas*Z_propagated')-(X_pred(:,t+1)*Z_pred(t+1)');      

        % Kalman gain 
        W_kalman = P_crosscov/P_innovation;                                                    

        % Estimation of next state
        xd(:,t+1)= X_pred(:,t+1) + W_kalman*(y(t)-Z_pred(t+1));
        x(:,t+1) = xd(:,t+1) + x_o(:);
        P_est = P_pred-(W_kalman*P_innovation*W_kalman');

        %Estimation of input for next state
        u(:,t+1) = (h)*x(1,t+1) ;

        rms_f(mc,t) = x(1,t+1) - y_t(t);
    end


    %Untreated true data (u = 0)

    x1_u = (260);
    x2_u = (0);
    x3_u = (7);
    x4_u = (10);

    y_u = (260);

    for t = 1:400
        x1_u(t+1) =  x1_u(t) - p1*x1_u(t) - x1_u(t)*x2_u(t) + Gb*p1 + x4_u(t);
        x2_u(t+1) =  x2_u(t) - p2*x2_u(t) + p3*x3_u(t) - p3*Ib;
        x3_u(t+1) =  x3_u(t) - p4*x3_u(t) + p4*Ib;
        x4_u(t+1) =  x4_u(t) - p5*x4_u(t);

        y_u(t+1) = x1_u(t+1) + randn;
    end

    %------------------------------Observer------------------------------------

    L = [0.0004075 -0.00003727 -0.0000000034 0.00000172]';

    x1_est = (x1(1));
    x2_est = (0);
    x3_est = (7);
    x4_est = (10);
    u_est = (x1_est(1)*h);

    for t = 1:400
        x1_est(t+1) =  x1_est(t) - p1*x1_est(t) - x1_est(t)*x2_est(t) + Gb*p1 + x4_est(t) + L(1)*(y_t(t)-x1_est(t));

        if x1_est(t+1) > 1e3
            break
        end

        x2_est(t+1) =  x2_est(t) - p2*x2_est(t) + p3*x3_est(t) - p3*Ib + L(2)*(y_t(t)-x1_est(t));
        x3_est(t+1) =  x3_est(t) - p4*x3_est(t)+ p4*Ib + u_est(t) + L(3)*(y_t(t)-x1_est(t));
        x4_est(t+1) =  x4_est(t) - p5*x4_est(t) + L(4)*(y_t(t)-x1_est(t));

        u_est(t+1) = h*x1_est(t+1);

        rms_o(mc,t) = x1_est(t+1) - y_t(t);
    end
end

%RMSE

rms_ff = rms(rms_f,1);
rms_oo = rms(rms_o,1);

%--------------------------------Plotting----------------------------------
Hyper = 180*ones(1,400);
Hypo = 50*ones(1,400);
Gb = 80*ones(1,400);

for t = 1:401
    if u(t) < 0
        u(t) = 0;
    end
end

figure(1)
xlabel('Time (minutes)')
ylabel('Insulin Infusion Rate (mU/I/min)')
grid ON
hold on
plot(u)
plot(0*ones(1,400))
legend('Control Input')
hold off

figure(2)
xlabel('Time (minutes)')
ylabel('BGC level - x1 state (mg/dl)')
grid ON
hold on
plot(Hyper, 'c')
plot(Hypo, 'g')
plot(Gb, 'm')
plot(y_u, 'k')
plot(x(1,:), 'r')
legend('Hyperglycemia', 'Hypoglycemia', 'Gb', 'x1(t) Untreated', 'x1(t) Treated-Filter Estimate')
hold off


figure(3)
grid ON
xlabel('Time (minutes)')
ylabel('BGC level - x1 state (mg/dl)')
hold on
plot(y_t)
plot(x1_est)
legend('True State','Observer estimate')

figure(4)
grid ON
xlabel('Time (minutes)')
ylabel('BGC level - x1 state (mg/dl)')
hold on
plot(y_t)
plot(x(1,:))
legend('True State','Cubature Filter estimate')

figure(5)
grid ON
xlabel('Time (minutes)')
ylabel('BGC level - x1 state (mg/dl)')
hold on
plot(rms_ff)
plot(rms_oo)
legend('RMSE for Cubature Filter','RMSE for Observer')

figure(6)
hold on
grid ON
xlabel('Time (minutes)')
ylabel('Remote Insulin - x2 state (/min)')
plot(x(2,:))
legend('Remote Insulin - x2 state estimation by filter')

figure(7)
hold on
grid ON
xlabel('Time (minutes)')
ylabel('Plasma Insulin Concentration - x3 state (mg/dl/min)')
plot(x(3,:))
legend('Plasma Insulin Concentration - x3 state estimation by filter')
